.TH FILEBENCH 1 "2020-01-23"

.\" Turn off justification and hyphenation
.ad l
.nh

.SH "NAME"
filebench \- filesytem and storage benchmarker

.SH "SYNOPSIS"
.B filebench
.RB [ \-f
.IR filename ]
.RB [ \-h ]
.RB [ \-c ]
.RB [ \-c
.IR cvartype ]

.SH "DESCRIPTION"
Filebench is a file system and storage benchmarker that allows one to generate a
large variety of workloads. Unlike typical benchmarks it is very flexible and
allows one to minutely specify (any) applications' behaviour using extensive
Workload Model Language (\s-1WML\s0). Filebench uses loadable workload
personalities to allow easy emulation of complex applications (e.g., mail, web,
file, and database servers). Filebench is quick to set up and easy to use
compared to deploying real applications. It is also a handy tool for
micro-benchmarking.
.PP
Filebench includes many features to facilitate file system benchmarking:
.PP
.IP \[bu] 4
Multiple workload types support via loadable personalities
.IP \[bu]
Ships with more than 40 pre\-defined personalities, including the one that
describe mail, web, file, and database servers behaviour
.IP \[bu]
Easy to add new personalities using reach Workload Model Language (WML)
.IP \[bu]
Multi\-process and multi\-thread workload support
.IP \[bu]
Configurable directory hierarchies with depth, width, and file sizes set to
given statistical distributions
.IP \[bu]
Support of asynchronous I/O and process synchronization primitives
.IP \[bu]
Integrated statistics for throughput, latency, and CPU cycle counts per system
call
.IP \[bu]
Tested on Linux, FreeBSD, and Solaris platforms (should work for any
POSIX\-compliant Operating System)

.SH "OPTIONS"
.PP
\fB\-f\fR \fIfilename\fR
.RS 4
Use specified file as an input instead of stdin\&.
.RE
.PP
\fB\-h\fR
.RS 4
Display verbose help\&.
.RE
.PP
\fB\-c\fR
.RS 4
Display supported cvar types\&.
.RE
.PP
\fB\-c\fR \fIcvartype\fR
.RS 4
Display options of the specific cvar type\&.
.RE

.SH "EXAMPLES"
Filebench generates I/O operations by executing a workload personality, which
defines the workload to apply to the system. Filebench is shipped with a library
of these personalities, ready to use.
.PP
The following example demonstrates how to run fileserver workload personality:

 \&    # Customize parameters
 \&    cp /usr/share/filebench/workloads/fileserver.f fileserver.f
 \&    vim fileserver.f
 \&
 \&    # Start benchmark
 \&    filebench \-f fileserver.f

.SS "CAUTION:"
A lot of Linux distributions enable address space randomization. This prevents
Filebench from mapping a shared memory region to the same address in different
processes. Disable address space randomization (echo 0 >
/proc/sys/kernel/randomize_va_space) for stable operation of multi-process
workloads.
.PP
If Filebench was not able to increase shared memory region size, you can either:
.PP
.IP \[bu] 4
Run Filebench as root
.IP \[bu]
Increase shared memory region size to 256MB
(echo 268435456 > /proc/sys/kernel/shmmax) and ignore this warning
.PP

.SH "Personalities"
Some predefined personalities (workloads) are located in /usr/share/filebench/workloads .

.SH "AUTHORS"
Alex Mestiashvili <mailatgoogl@gmail.com>, Hyeon Kim <simnalamburt@gmail.com>

.SH "HOMEPAGE"
.sp
https://github.com/cares-snu/filebench
.sp
Please report bugs and feature requests in the issue tracker\&.

.SH "SEE ALSO"
For further documentation see \s-1README\s0.
.PP
For \s-1WML\s0 desription see Writing Worlkoad Models:
.PP
.IP \[bu] 4
https://github.com/filebench/filebench/wiki/Workload-model-language
.IP \[bu]
https://github.com/filebench/filebench/wiki/Writing-workload-models
